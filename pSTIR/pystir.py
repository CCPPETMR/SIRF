# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pystir', [dirname(__file__)])
        except ImportError:
            import _pystir
            return _pystir
        if fp is not None:
            try:
                _mod = imp.load_module('_pystir', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pystir = swig_import_helper()
    del swig_import_helper
else:
    import _pystir
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def cSTIR_setParameter(ptr, set, name, value):
    return _pystir.cSTIR_setParameter(ptr, set, name, value)
cSTIR_setParameter = _pystir.cSTIR_setParameter

def cSTIR_parameter(ptr, set, name):
    return _pystir.cSTIR_parameter(ptr, set, name)
cSTIR_parameter = _pystir.cSTIR_parameter

def cSTIR_newObject(name):
    return _pystir.cSTIR_newObject(name)
cSTIR_newObject = _pystir.cSTIR_newObject

def cSTIR_deleteObject(ptr, name):
    return _pystir.cSTIR_deleteObject(ptr, name)
cSTIR_deleteObject = _pystir.cSTIR_deleteObject

def cSTIR_setupObject(obj, ptr_obj):
    return _pystir.cSTIR_setupObject(obj, ptr_obj)
cSTIR_setupObject = _pystir.cSTIR_setupObject

def cSTIR_newReconstruction(method, filename):
    return _pystir.cSTIR_newReconstruction(method, filename)
cSTIR_newReconstruction = _pystir.cSTIR_newReconstruction

def cSTIR_setupReconstruction(ptr_r, ptr_i):
    return _pystir.cSTIR_setupReconstruction(ptr_r, ptr_i)
cSTIR_setupReconstruction = _pystir.cSTIR_setupReconstruction

def cSTIR_reconstruct(ptr_r, ptr_i):
    return _pystir.cSTIR_reconstruct(ptr_r, ptr_i)
cSTIR_reconstruct = _pystir.cSTIR_reconstruct

def cSTIR_update(ptr_r, ptr_i):
    return _pystir.cSTIR_update(ptr_r, ptr_i)
cSTIR_update = _pystir.cSTIR_update

def cSTIR_deleteReconstruction(ptr_r):
    return _pystir.cSTIR_deleteReconstruction(ptr_r)
cSTIR_deleteReconstruction = _pystir.cSTIR_deleteReconstruction

def cSTIR_getImageDimensions(ptr, pd):
    return _pystir.cSTIR_getImageDimensions(ptr, pd)
cSTIR_getImageDimensions = _pystir.cSTIR_getImageDimensions

def cSTIR_getImageData(ptr, pd):
    return _pystir.cSTIR_getImageData(ptr, pd)
cSTIR_getImageData = _pystir.cSTIR_getImageData

def cSTIR_voxels3DF(nx, ny, nz, sx, sy, sz, x, y, z):
    return _pystir.cSTIR_voxels3DF(nx, ny, nz, sx, sy, sz, x, y, z)
cSTIR_voxels3DF = _pystir.cSTIR_voxels3DF

def cSTIR_imageFromVoxels(ptr_v):
    return _pystir.cSTIR_imageFromVoxels(ptr_v)
cSTIR_imageFromVoxels = _pystir.cSTIR_imageFromVoxels

def cSTIR_imageFromFile(filename):
    return _pystir.cSTIR_imageFromFile(filename)
cSTIR_imageFromFile = _pystir.cSTIR_imageFromFile

def cSTIR_addShape(ptr_i, ptr_v, ptr_s, v):
    return _pystir.cSTIR_addShape(ptr_i, ptr_v, ptr_s, v)
cSTIR_addShape = _pystir.cSTIR_addShape

def cSTIR_imagesDifference(first, second, rimsize):
    return _pystir.cSTIR_imagesDifference(first, second, rimsize)
cSTIR_imagesDifference = _pystir.cSTIR_imagesDifference

def newDataHandle():
    return _pystir.newDataHandle()
newDataHandle = _pystir.newDataHandle

def charDataHandle(s):
    return _pystir.charDataHandle(s)
charDataHandle = _pystir.charDataHandle

def intDataHandle(i):
    return _pystir.intDataHandle(i)
intDataHandle = _pystir.intDataHandle

def floatDataHandle(i):
    return _pystir.floatDataHandle(i)
floatDataHandle = _pystir.floatDataHandle

def doubleDataHandle(i):
    return _pystir.doubleDataHandle(i)
doubleDataHandle = _pystir.doubleDataHandle

def charDataFromHandle(ptr):
    return _pystir.charDataFromHandle(ptr)
charDataFromHandle = _pystir.charDataFromHandle

def intDataFromHandle(ptr):
    return _pystir.intDataFromHandle(ptr)
intDataFromHandle = _pystir.intDataFromHandle

def floatDataFromHandle(ptr):
    return _pystir.floatDataFromHandle(ptr)
floatDataFromHandle = _pystir.floatDataFromHandle

def doubleDataFromHandle(ptr):
    return _pystir.doubleDataFromHandle(ptr)
doubleDataFromHandle = _pystir.doubleDataFromHandle

def deleteDataHandle(ptr):
    return _pystir.deleteDataHandle(ptr)
deleteDataHandle = _pystir.deleteDataHandle

def executionStatus(ptr):
    return _pystir.executionStatus(ptr)
executionStatus = _pystir.executionStatus

def executionError(ptr):
    return _pystir.executionError(ptr)
executionError = _pystir.executionError

def executionErrorFile(ptr):
    return _pystir.executionErrorFile(ptr)
executionErrorFile = _pystir.executionErrorFile

def executionErrorLine(ptr):
    return _pystir.executionErrorLine(ptr)
executionErrorLine = _pystir.executionErrorLine

def newTextPrinter(stream):
    return _pystir.newTextPrinter(stream)
newTextPrinter = _pystir.newTextPrinter

def newTextWriter(stream):
    return _pystir.newTextWriter(stream)
newTextWriter = _pystir.newTextWriter

def openChannel(channel, ptr_w):
    return _pystir.openChannel(channel, ptr_w)
openChannel = _pystir.openChannel

def closeChannel(channel):
    return _pystir.closeChannel(channel)
closeChannel = _pystir.closeChannel

def setWriter(ptr_w, channel):
    return _pystir.setWriter(ptr_w, channel)
setWriter = _pystir.setWriter

def resetWriter():
    return _pystir.resetWriter()
resetWriter = _pystir.resetWriter

def deleteTextPrinter(ptr):
    return _pystir.deleteTextPrinter(ptr)
deleteTextPrinter = _pystir.deleteTextPrinter

def deleteTextWriter(ptr_w):
    return _pystir.deleteTextWriter(ptr_w)
deleteTextWriter = _pystir.deleteTextWriter
# This file is compatible with both classic and new-style classes.


